[[sanitizing-data]]
=== Sanitizing data

Sometimes it is necessary to sanitize the data sent to ZUQA,
e.g. remove sensitive data.

To do this with the ZUQA module, you create a processor.
A processor is a function that takes a `client` instance as well as an event (an error, a transaction, a span, or a metricset),
and returns the modified event.

To completely drop an event, your processor should return `False` (or any other "falsy" value) instead of the event.

This is an example of a processor that removes the exception stacktrace from an error:

[source,python]
----
from zuqa.conf.constants import ERROR
from zuqa.processors import for_events

@for_events(ERROR)
def my_processor(client, event):
    if 'exception' in event and 'stacktrace' in event['exception']:
        event['exception'].pop('stacktrace')
    return event
----

You can use the `@for_events` decorator to limit for which event type the processor should be called.
Possible choices are `ERROR`, `TRANSACTION`, `SPAN` and `METRICSET`,
all of which are defined in `zuqa.conf.constants`.

To use this processor, update your `ZUQA` settings like this:

[source,python]
----
ZUQA = {
    'APP_NAME': '<APP-NAME>',
    'SECRET_TOKEN': '<SECRET-TOKEN>',
    'PROCESSORS': (
        'path.to.my_processor',
        'zuqa.processors.sanitize_stacktrace_locals',
        'zuqa.processors.sanitize_http_request_cookies',
        'zuqa.processors.sanitize_http_headers',
        'zuqa.processors.sanitize_http_wsgi_env',
        'zuqa.processors.sanitize_http_request_querystring',
        'zuqa.processors.sanitize_http_request_body',
    ),
}
----

NOTE: We recommend to use the above list of processors that sanitize passwords and secrets in different places of the event object.
